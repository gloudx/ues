package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"ues/blockstore"
	ds "ues/datastore"
	"ues/repository"

	dsapi "github.com/ipfs/go-datastore"
	"github.com/ipld/go-ipld-prime/codec/dagcbor"
	"github.com/ipld/go-ipld-prime/multicodec"
	"github.com/ipld/go-ipld-prime/node/basicnode"
)

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥–µ–∫–∏ IPLD
	multicodec.RegisterEncoder(0x71, dagcbor.Encode)
	multicodec.RegisterDecoder(0x71, dagcbor.Decode)

	ctx := context.Background()

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	tempDir := "/tmp/ues_seeds_demo"
	err := os.MkdirAll(tempDir, 0755)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %v", err)
	}
	defer os.RemoveAll(tempDir)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
	datastore, err := ds.NewDatastorage(filepath.Join(tempDir, "datastore"), nil)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è datastore: %v", err)
	}
	defer datastore.Close()

	blockstore := blockstore.NewBlockstore(datastore)
	repo := repository.New(blockstore)

	fmt.Println("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –≤ –¥–∞—Ç–∞—Å—Ç–æ—Ä–µ —Å —Å–∏–¥–∞–º–∏ aaa, bbb, ccc")
	fmt.Println("=================================================================")
	fmt.Println()

	// –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é "seeds"
	_, err = repo.CreateCollection(ctx, "seeds")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: %v", err)
	}
	fmt.Println("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è 'seeds'")

	// –°–æ–∑–¥–∞–µ–º IPLD –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–¥–∞
	seeds := []string{"aaa", "bbb", "ccc"}

	for i, seed := range seeds {
		// –°–æ–∑–¥–∞–µ–º IPLD –¥–æ–∫—É–º–µ–Ω—Ç
		nodeBuilder := basicnode.Prototype.Map.NewBuilder()
		mapAssembler, _ := nodeBuilder.BeginMap(3)

		mapAssembler.AssembleKey().AssignString("seed")
		mapAssembler.AssembleValue().AssignString(seed)

		mapAssembler.AssembleKey().AssignString("index")
		mapAssembler.AssembleValue().AssignInt(int64(i + 1))

		mapAssembler.AssembleKey().AssignString("description")
		mapAssembler.AssembleValue().AssignString(fmt.Sprintf("–î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Å–∏–¥–∞ %s", seed))

		mapAssembler.Finish()
		document := nodeBuilder.Build()

		// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
		recordCID, err := repo.PutRecord(ctx, "seeds", seed, document)
		if err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ %s: %v", seed, err)
		}

		fmt.Printf("üìÑ –î–æ–±–∞–≤–ª–µ–Ω —Å–∏–¥ '%s' —Å CID: %s\n", seed, recordCID.String())
	}

	fmt.Println()

	// –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
	commitCID, err := repo.Commit(ctx)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞: %v", err)
	}
	fmt.Printf("üíæ –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω: %s\n", commitCID.String())
	fmt.Println()

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –≤ –¥–∞—Ç–∞—Å—Ç–æ—Ä–µ
	fmt.Println("üîç –í–°–ï –ö–õ–Æ–ß–ò –í –î–ê–¢–ê–°–¢–û–†–ï:")
	fmt.Println("----------------------------------------")

	keys, errorChan, err := datastore.Keys(ctx, dsapi.NewKey(""))
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π: %v", err)
	}

	var allKeys []string

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
	go func() {
		for err := range errorChan {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: %v", err)
		}
	}()

	// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏
	for key := range keys {
		allKeys = append(allKeys, key.String())
	}

	// –í—ã–≤–æ–¥–∏–º –∫–ª—é—á–∏ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
	fmt.Printf("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π: %d\n\n", len(allKeys))

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–ª—é—á–∏ –ø–æ —Ç–∏–ø–∞–º
	blockKeys := []string{}
	indexKeys := []string{}
	otherKeys := []string{}

	for _, key := range allKeys {
		if len(key) > 10 && key[0] == '/' && (len(key) > 50 || containsCID(key)) {
			blockKeys = append(blockKeys, key)
		} else if containsWord(key, "index") || containsWord(key, "collection") {
			indexKeys = append(indexKeys, key)
		} else {
			otherKeys = append(otherKeys, key)
		}
	}

	// –í—ã–≤–æ–¥–∏–º –±–ª–æ—á–Ω—ã–µ –∫–ª—é—á–∏ (CID)
	if len(blockKeys) > 0 {
		fmt.Printf("üì¶ –ë–õ–û–ß–ù–´–ï –ö–õ–Æ–ß–ò (CID blocks - %d —à—Ç.):\n", len(blockKeys))
		for i, key := range blockKeys {
			if i < 10 { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
				fmt.Printf("   %s\n", key)
			}
		}
		if len(blockKeys) > 10 {
			fmt.Printf("   ... –∏ –µ—â–µ %d –±–ª–æ–∫–æ–≤\n", len(blockKeys)-10)
		}
		fmt.Println()
	}

	// –í—ã–≤–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å–Ω—ã–µ –∫–ª—é—á–∏
	if len(indexKeys) > 0 {
		fmt.Printf("üóÇÔ∏è  –ò–ù–î–ï–ö–°–ù–´–ï –ö–õ–Æ–ß–ò (%d —à—Ç.):\n", len(indexKeys))
		for _, key := range indexKeys {
			fmt.Printf("   %s\n", key)
		}
		fmt.Println()
	}

	// –í—ã–≤–æ–¥–∏–º –ø—Ä–æ—á–∏–µ –∫–ª—é—á–∏
	if len(otherKeys) > 0 {
		fmt.Printf("üìã –ü–†–û–ß–ò–ï –ö–õ–Æ–ß–ò (%d —à—Ç.):\n", len(otherKeys))
		for _, key := range otherKeys {
			fmt.Printf("   %s\n", key)
		}
		fmt.Println()
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
	fmt.Println("üìä –î–ê–ù–ù–´–ï –ò–ó –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø:")
	fmt.Println("------------------------------")

	collections := repo.ListCollections()
	fmt.Printf("–ö–æ–ª–ª–µ–∫—Ü–∏–∏: %v\n", collections)

	records, err := repo.ListRecords(ctx, "seeds")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: %v", err)
	}

	fmt.Printf("–ó–∞–ø–∏—Å–∏ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ 'seeds' (%d —à—Ç.):\n", len(records))
	for _, record := range records {
		fmt.Printf("   –ö–ª—é—á: '%s' -> CID: %s\n", record.Key, record.Value.String())
	}

	fmt.Println()
	fmt.Println("‚ú® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
func containsCID(s string) bool {
	// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ CID
	return len(s) > 40 && (s[1] == 'b' || s[1] == 'z' || s[1] == 'Q')
}

func containsWord(s, word string) bool {
	return len(s) > len(word) &&
		(s[1:len(word)+1] == word ||
			s[len(s)-len(word):] == word ||
			fmt.Sprintf("/%s/", word) == s[0:len(word)+2] ||
			fmt.Sprintf("/%s", word) == s[len(s)-len(word)-1:])
}
