package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"ues/blockstore"
	"ues/datastore"
	"ues/repository"

	"github.com/ipld/go-ipld-prime/codec/dagcbor"
	"github.com/ipld/go-ipld-prime/datamodel"
	"github.com/ipld/go-ipld-prime/multicodec"
	"github.com/ipld/go-ipld-prime/node/basicnode"
)

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥–µ–∫–∏ IPLD
	multicodec.RegisterEncoder(0x71, dagcbor.Encode)
	multicodec.RegisterDecoder(0x71, dagcbor.Decode)

	ctx := context.Background()

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	tempDir := "/tmp/ues_complex_example"
	err := os.MkdirAll(tempDir, 0755)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %v", err)
	}
	defer os.RemoveAll(tempDir)

	ds, err := datastore.NewDatastorage(tempDir, nil)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è datastore: %v", err)
	}
	defer ds.Close()

	bs := blockstore.NewBlockstore(ds)
	defer bs.Close()

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
	repo := repository.New(bs)

	fmt.Println("=== –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è ===")
	fmt.Println()

	// –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π
	collections := []string{"xxx", "posts", "users", "comments"}

	for _, collection := range collections {
		fmt.Printf("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '%s'...\n", collection)
		_, err = repo.CreateCollection(ctx, collection)
		if err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ %s: %v", collection, err)
		}
	}

	fmt.Printf("–°–æ–∑–¥–∞–Ω—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏: %v\n", repo.ListCollections())
	fmt.Println()

	// –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –∫–ª—é—á–æ–º "ooo" –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é "xxx"
	fmt.Println("=== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é 'xxx' ===")

	doc1 := createDocument(map[string]interface{}{
		"title":   "–î–æ–∫—É–º–µ–Ω—Ç —Å –∫–ª—é—á–æ–º ooo",
		"content": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ xxx",
		"type":    "example",
	})

	_, err = repo.PutRecord(ctx, "xxx", "ooo", doc1)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: %v", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	fmt.Println("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π...")

	// –í –∫–æ–ª–ª–µ–∫—Ü–∏—é "posts"
	post1 := createDocument(map[string]interface{}{
		"title":   "–ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç",
		"author":  "user1",
		"content": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞",
	})
	_, err = repo.PutRecord(ctx, "posts", "post_001", post1)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞: %v", err)
	}

	post2 := createDocument(map[string]interface{}{
		"title":   "–í—Ç–æ—Ä–æ–π –ø–æ—Å—Ç",
		"author":  "user2",
		"content": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ—Å—Ç–∞",
	})
	_, err = repo.PutRecord(ctx, "posts", "post_002", post2)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞: %v", err)
	}

	// –í –∫–æ–ª–ª–µ–∫—Ü–∏—é "users"
	user1 := createDocument(map[string]interface{}{
		"name":  "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
		"email": "ivan@example.com",
		"role":  "admin",
	})
	_, err = repo.PutRecord(ctx, "users", "user_ivan", user1)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}

	user2 := createDocument(map[string]interface{}{
		"name":  "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞",
		"email": "maria@example.com",
		"role":  "editor",
	})
	_, err = repo.PutRecord(ctx, "users", "user_maria", user2)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}

	// –í –∫–æ–ª–ª–µ–∫—Ü–∏—é "comments"
	comment1 := createDocument(map[string]interface{}{
		"post_id": "post_001",
		"author":  "user_maria",
		"text":    "–û—Ç–ª–∏—á–Ω—ã–π –ø–æ—Å—Ç!",
	})
	_, err = repo.PutRecord(ctx, "comments", "comment_001", comment1)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: %v", err)
	}

	fmt.Println()

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª—é—á–µ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
	fmt.Println("=== –ü–û–õ–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ö–õ–Æ–ß–ï–ô –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø ===")
	fmt.Println()

	collections = repo.ListCollections()
	fmt.Printf("–í—Å–µ–≥–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: %d\n", len(collections))
	fmt.Println()

	totalRecords := 0

	for _, collectionName := range collections {
		fmt.Printf("üìÅ –ö–æ–ª–ª–µ–∫—Ü–∏—è: %s\n", collectionName)

		records, err := repo.ListRecords(ctx, collectionName)
		if err != nil {
			fmt.Printf("   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: %v\n", err)
			continue
		}

		if len(records) == 0 {
			fmt.Println("   (–ø—É—Å—Ç–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è)")
		} else {
			fmt.Printf("   –ó–∞–ø–∏—Å–µ–π: %d\n", len(records))
			totalRecords += len(records)

			for i, entry := range records {
				fmt.Printf("   %d. üìÑ %s/%s\n", i+1, collectionName, entry.Key)
				fmt.Printf("      CID: %s\n", entry.Value.String())

				// –ü–æ–ª—É—á–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–ø–∏—Å–∏
				node, found, err := repo.GetRecord(ctx, collectionName, entry.Key)
				if found && err == nil {
					fmt.Print("      –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ")
					if titleNode, err := node.LookupByString("title"); err == nil {
						if title, err := titleNode.AsString(); err == nil {
							fmt.Printf("title='%s'", title)
						}
					}
					if nameNode, err := node.LookupByString("name"); err == nil {
						if name, err := nameNode.AsString(); err == nil {
							fmt.Printf("name='%s'", name)
						}
					}
					if textNode, err := node.LookupByString("text"); err == nil {
						if text, err := textNode.AsString(); err == nil {
							fmt.Printf("text='%s'", text)
						}
					}
					fmt.Println()
				}
				fmt.Println()
			}
		}
		fmt.Println()
	}

	fmt.Printf("=== –ò–¢–û–ì–û ===\n")
	fmt.Printf("–ö–æ–ª–ª–µ–∫—Ü–∏–π: %d\n", len(collections))
	fmt.Printf("–ó–∞–ø–∏—Å–µ–π: %d\n", totalRecords)
	fmt.Println()

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
	fmt.Println("=== –ü–û–ò–°–ö –ó–ê–ü–ò–°–ò xxx/ooo ===")
	node, found, err := repo.GetRecord(ctx, "xxx", "ooo")
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: %v\n", err)
	} else if !found {
		fmt.Println("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
	} else {
		fmt.Println("‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞!")
		titleNode, _ := node.LookupByString("title")
		title, _ := titleNode.AsString()
		fmt.Printf("–ó–∞–≥–æ–ª–æ–≤–æ–∫: %s\n", title)

		contentNode, _ := node.LookupByString("content")
		content, _ := contentNode.AsString()
		fmt.Printf("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: %s\n", content)
	}
}

func createDocument(data map[string]interface{}) datamodel.Node {
	nodeBuilder := basicnode.Prototype.Any.NewBuilder()
	mapAssembler, _ := nodeBuilder.BeginMap(int64(len(data)))

	for key, value := range data {
		mapAssembler.AssembleKey().AssignString(key)
		mapAssembler.AssembleValue().AssignString(fmt.Sprintf("%v", value))
	}

	mapAssembler.Finish()
	return nodeBuilder.Build()
}
