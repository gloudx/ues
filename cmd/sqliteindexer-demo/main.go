// SQLiteIndexer Demo Application
//
// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π SQLiteIndexer.
// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π, –ø–æ–∏—Å–∫–æ–º, –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.
package main

import (
	"bufio"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/ipfs/go-cid"
	mh "github.com/multiformats/go-multihash"

	"ues/sqliteindexer"
)

// DemoApp –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
type DemoApp struct {
	indexer *sqliteindexer.SimpleSQLiteIndexer
	ctx     context.Context
}

func main() {
	fmt.Println("üöÄ SQLiteIndexer Demo Application")
	fmt.Println("==================================")

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	tmpDir := os.TempDir()
	dbPath := filepath.Join(tmpDir, fmt.Sprintf("sqlite_indexer_demo_%d.db", time.Now().Unix()))

	fmt.Printf("üìÑ –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: %s\n", dbPath)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SimpleSQLiteIndexer (–±–µ–∑ FTS5)
	indexer, err := sqliteindexer.NewSimpleSQLiteIndexer(dbPath)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–µ—Ä–∞: %v", err)
	}
	defer func() {
		indexer.Close()
		// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î –ø–æ—Å–ª–µ –¥–µ–º–æ
		os.Remove(dbPath)
		fmt.Printf("üóëÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞: %s\n", dbPath)
	}()

	app := &DemoApp{
		indexer: indexer,
		ctx:     context.Background(),
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	if len(os.Args) > 1 && os.Args[1] == "cli" {
		// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
		app.runInteractiveCLI()
	} else {
		// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
		app.runDemo()
	}
}

// runDemo –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
func (app *DemoApp) runDemo() {
	fmt.Println("\nüîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π SQLiteIndexer")
	fmt.Println("==========================================")

	// 1. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	fmt.Println("\nüìù 1. –ò–ù–î–ï–ö–°–ê–¶–ò–Ø –ó–ê–ü–ò–°–ï–ô")
	app.demoIndexing()

	// 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
	fmt.Println("\nüîé 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê")
	app.demoSearch()

	// 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
	fmt.Println("\nüìä 3. –ê–ù–ê–õ–ò–¢–ò–ö–ê –ö–û–õ–õ–ï–ö–¶–ò–ô")
	app.demoAnalytics()

	// 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ
	fmt.Println("\n‚úèÔ∏è  4. –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò –£–î–ê–õ–ï–ù–ò–ï")
	app.demoUpdatesAndDeletes()

	fmt.Println("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
}

// demoIndexing –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø–∏—Å–µ–π
func (app *DemoApp) demoIndexing() {
	testRecords := app.generateTestData()

	fmt.Printf("üìä –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º %d —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π...\n", len(testRecords))

	for i, record := range testRecords {
		// –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π CID –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
		cid := app.generateCID(fmt.Sprintf("record_%d", i))

		err := app.indexer.IndexRecord(app.ctx, cid, record)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ %d: %v\n", i, err)
			continue
		}

		fmt.Printf("  ‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å %s/%s (CID: %s)\n",
			record.Collection, record.RKey, cid.String()[:12]+"...")
	}
}

// demoSearch –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–∏—Å–∫–∞
func (app *DemoApp) demoSearch() {
	searchTests := []struct {
		name  string
		query sqliteindexer.SearchQuery
	}{
		{
			name: "–ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤",
			query: sqliteindexer.SearchQuery{
				Collection: "posts",
				Limit:      5,
			},
		},
		{
			name: "–ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è'",
			query: sqliteindexer.SearchQuery{
				FullTextQuery: "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è",
				Limit:         3,
			},
		},
		{
			name: "–ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É",
			query: sqliteindexer.SearchQuery{
				Collection: "posts",
				Filters: map[string]interface{}{
					"author": "alice",
				},
				Limit: 3,
			},
		},
		{
			name: "–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
			query: sqliteindexer.SearchQuery{
				Collection: "users",
				Filters: map[string]interface{}{
					"active": "true",
				},
				Limit: 3,
			},
		},
		{
			name: "–ü–æ–∏—Å–∫ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–µ",
			query: sqliteindexer.SearchQuery{
				Collection: "posts",
				SortBy:     "created_at",
				SortOrder:  "DESC",
				Limit:      3,
			},
		},
	}

	for _, test := range searchTests {
		fmt.Printf("\nüîç %s:\n", test.name)

		results, err := app.indexer.SearchRecords(app.ctx, test.query)
		if err != nil {
			fmt.Printf("  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: %v\n", err)
			continue
		}

		if len(results) == 0 {
			fmt.Printf("  üì≠ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n")
			continue
		}

		for i, result := range results {
			fmt.Printf("  %d. [%s/%s] %s",
				i+1, result.Collection, result.RKey, result.CID.String()[:12]+"...")

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è FTS –ø–æ–∏—Å–∫–∞
			if result.Relevance > 0 {
				fmt.Printf(" (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: %.2f)", result.Relevance)
			}

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
			if title, ok := result.Data["title"].(string); ok {
				fmt.Printf(" - %s", title)
			} else if name, ok := result.Data["name"].(string); ok {
				fmt.Printf(" - %s", name)
			}
			fmt.Println()
		}
	}
}

// demoAnalytics –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
func (app *DemoApp) demoAnalytics() {
	collections := []string{"posts", "users", "comments", "tags"}

	for _, collection := range collections {
		stats, err := app.indexer.GetCollectionStats(app.ctx, collection)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è %s: %v\n", collection, err)
			continue
		}

		fmt.Printf("üìä –ö–æ–ª–ª–µ–∫—Ü–∏—è '%s':\n", collection)
		fmt.Printf("  üìÑ –ó–∞–ø–∏—Å–µ–π: %v\n", stats["record_count"])
		fmt.Printf("  üè∑Ô∏è  –¢–∏–ø–æ–≤: %v\n", stats["type_count"])

		if firstRecord, ok := stats["first_record"].(time.Time); ok && !firstRecord.IsZero() {
			fmt.Printf("  üïê –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: %s\n", firstRecord.Format("2006-01-02 15:04:05"))
		}

		if lastUpdated, ok := stats["last_updated"].(time.Time); ok && !lastUpdated.IsZero() {
			fmt.Printf("  üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: %s\n", lastUpdated.Format("2006-01-02 15:04:05"))
		}

		fmt.Println()
	}
}

// demoUpdatesAndDeletes –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
func (app *DemoApp) demoUpdatesAndDeletes() {
	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
	cid := app.generateCID("update_test")
	record := sqliteindexer.IndexMetadata{
		Collection: "test",
		RKey:       "update_demo",
		RecordType: "demo",
		Data: map[string]interface{}{
			"title":   "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
			"status":  "draft",
			"version": 1,
		},
		SearchText: "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫",
		CreatedAt:  time.Now(),
		UpdatedAt:  time.Now(),
	}

	fmt.Println("üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å...")
	err := app.indexer.IndexRecord(app.ctx, cid, record)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: %v\n", err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–ª–∞—Å—å
	results, err := app.indexer.SearchRecords(app.ctx, sqliteindexer.SearchQuery{
		Collection: "test",
		Limit:      1,
	})
	if err != nil || len(results) == 0 {
		fmt.Println("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")
		return
	}
	fmt.Printf("‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: %s\n", results[0].Data["title"])

	// –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
	fmt.Println("\n‚úèÔ∏è  –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å...")
	record.Data["title"] = "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å"
	record.Data["status"] = "published"
	record.Data["version"] = 2
	record.SearchText = "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ"
	record.UpdatedAt = time.Now()

	err = app.indexer.IndexRecord(app.ctx, cid, record)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: %v\n", err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
	results, err = app.indexer.SearchRecords(app.ctx, sqliteindexer.SearchQuery{
		Collection: "test",
		Limit:      1,
	})
	if err != nil || len(results) == 0 {
		fmt.Println("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
		return
	}
	fmt.Printf("‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: %s (—Å—Ç–∞—Ç—É—Å: %s)\n",
		results[0].Data["title"], results[0].Data["status"])

	// –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
	fmt.Println("\nüóëÔ∏è  –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å...")
	err = app.indexer.DeleteRecord(app.ctx, cid)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: %v\n", err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
	results, err = app.indexer.SearchRecords(app.ctx, sqliteindexer.SearchQuery{
		Collection: "test",
		Limit:      1,
	})
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: %v\n", err)
		return
	}

	if len(results) == 0 {
		fmt.Println("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
	} else {
		fmt.Println("‚ùå –ó–∞–ø–∏—Å—å –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è")
	}
}

// generateTestData —Å–æ–∑–¥–∞–µ—Ç –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
func (app *DemoApp) generateTestData() []sqliteindexer.IndexMetadata {
	now := time.Now()

	return []sqliteindexer.IndexMetadata{
		// –ü–æ—Å—Ç—ã –±–ª–æ–≥–∞
		{
			Collection: "posts",
			RKey:       "post_1",
			RecordType: "article",
			Data: map[string]interface{}{
				"title":     "–í–≤–µ–¥–µ–Ω–∏–µ –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
				"author":    "alice",
				"content":   "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π —Å–ª–æ–∂–Ω—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é...",
				"tags":      []string{"—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"},
				"likes":     42,
				"published": true,
			},
			SearchText: "–í–≤–µ–¥–µ–Ω–∏–µ –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã alice —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
			CreatedAt:  now.Add(-24 * time.Hour),
			UpdatedAt:  now.Add(-12 * time.Hour),
		},
		{
			Collection: "posts",
			RKey:       "post_2",
			RecordType: "article",
			Data: map[string]interface{}{
				"title":     "–û—Å–Ω–æ–≤—ã –±–ª–æ–∫—á–µ–π–Ω —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
				"author":    "bob",
				"content":   "–ë–ª–æ–∫—á–µ–π–Ω - —ç—Ç–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞...",
				"tags":      []string{"–±–ª–æ–∫—á–µ–π–Ω", "–∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è"},
				"likes":     38,
				"published": true,
			},
			SearchText: "–û—Å–Ω–æ–≤—ã –±–ª–æ–∫—á–µ–π–Ω —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π bob –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è",
			CreatedAt:  now.Add(-18 * time.Hour),
			UpdatedAt:  now.Add(-6 * time.Hour),
		},
		{
			Collection: "posts",
			RKey:       "post_3",
			RecordType: "tutorial",
			Data: map[string]interface{}{
				"title":     "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Go –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤",
				"author":    "alice",
				"content":   "Go —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–ª–∏—á–Ω—ã–º —è–∑—ã–∫–æ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...",
				"tags":      []string{"go", "–º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"},
				"likes":     67,
				"published": false,
			},
			SearchText: "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Go –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ alice –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
			CreatedAt:  now.Add(-6 * time.Hour),
			UpdatedAt:  now.Add(-2 * time.Hour),
		},

		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
		{
			Collection: "users",
			RKey:       "user_alice",
			RecordType: "developer",
			Data: map[string]interface{}{
				"name":      "Alice Johnson",
				"email":     "alice@example.com",
				"active":    true,
				"role":      "senior_developer",
				"skills":    []string{"Go", "Python", "JavaScript", "Docker"},
				"join_date": "2022-01-15",
			},
			SearchText: "Alice Johnson alice@example.com senior_developer Go Python JavaScript Docker",
			CreatedAt:  now.Add(-720 * time.Hour), // 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
			UpdatedAt:  now.Add(-1 * time.Hour),
		},
		{
			Collection: "users",
			RKey:       "user_bob",
			RecordType: "developer",
			Data: map[string]interface{}{
				"name":      "Bob Smith",
				"email":     "bob@example.com",
				"active":    true,
				"role":      "tech_lead",
				"skills":    []string{"Java", "Kubernetes", "AWS", "Terraform"},
				"join_date": "2021-08-20",
			},
			SearchText: "Bob Smith bob@example.com tech_lead Java Kubernetes AWS Terraform",
			CreatedAt:  now.Add(-1000 * time.Hour), // ~42 –¥–Ω—è –Ω–∞–∑–∞–¥
			UpdatedAt:  now.Add(-48 * time.Hour),
		},
		{
			Collection: "users",
			RKey:       "user_carol",
			RecordType: "designer",
			Data: map[string]interface{}{
				"name":      "Carol Davis",
				"email":     "carol@example.com",
				"active":    false,
				"role":      "ui_designer",
				"skills":    []string{"Figma", "Sketch", "CSS", "React"},
				"join_date": "2023-03-10",
			},
			SearchText: "Carol Davis carol@example.com ui_designer Figma Sketch CSS React",
			CreatedAt:  now.Add(-200 * time.Hour),
			UpdatedAt:  now.Add(-120 * time.Hour),
		},

		// –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
		{
			Collection: "comments",
			RKey:       "comment_1",
			RecordType: "post_comment",
			Data: map[string]interface{}{
				"post_id": "post_1",
				"author":  "bob",
				"content": "–û—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç—å—è! –û—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö.",
				"upvotes": 5,
			},
			SearchText: "–û—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç—å—è –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö bob",
			CreatedAt:  now.Add(-12 * time.Hour),
			UpdatedAt:  now.Add(-12 * time.Hour),
		},
		{
			Collection: "comments",
			RKey:       "comment_2",
			RecordType: "post_comment",
			Data: map[string]interface{}{
				"post_id": "post_2",
				"author":  "alice",
				"content": "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–∑–≥–ª—è–¥ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. –•–æ—Ç–µ–ª–æ—Å—å –±—ã –±–æ–ª—å—à–µ –ø—Ä–∏–º–µ—Ä–æ–≤.",
				"upvotes": 3,
			},
			SearchText: "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–∑–≥–ª—è–¥ –±–ª–æ–∫—á–µ–π–Ω —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ alice",
			CreatedAt:  now.Add(-8 * time.Hour),
			UpdatedAt:  now.Add(-8 * time.Hour),
		},

		// –¢–µ–≥–∏
		{
			Collection: "tags",
			RKey:       "tag_tech",
			RecordType: "category",
			Data: map[string]interface{}{
				"name":        "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è",
				"description": "–°—Ç–∞—Ç—å–∏ –æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏—è—Ö",
				"post_count":  15,
				"color":       "#2196F3",
			},
			SearchText: "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏–Ω–Ω–æ–≤–∞—Ü–∏—è—Ö",
			CreatedAt:  now.Add(-2000 * time.Hour),
			UpdatedAt:  now.Add(-24 * time.Hour),
		},
		{
			Collection: "tags",
			RKey:       "tag_programming",
			RecordType: "category",
			Data: map[string]interface{}{
				"name":        "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
				"description": "–°—Ç–∞—Ç—å–∏ –æ —è–∑—ã–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
				"post_count":  23,
				"color":       "#4CAF50",
			},
			SearchText: "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
			CreatedAt:  now.Add(-1800 * time.Hour),
			UpdatedAt:  now.Add(-12 * time.Hour),
		},
	}
}

// generateCID —Å–æ–∑–¥–∞–µ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π CID –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
func (app *DemoApp) generateCID(data string) cid.Cid {
	// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π hash –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	hash, _ := mh.Sum([]byte(data), mh.SHA2_256, -1)
	c := cid.NewCidV1(cid.Raw, hash)
	return c
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞

func prettyPrintJSON(v interface{}) {
	b, err := json.MarshalIndent(v, "", "  ")
	if err != nil {
		fmt.Printf("Error: %v", err)
		return
	}
	fmt.Println(string(b))
}

// runInteractiveCLI –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π CLI —Ä–µ–∂–∏–º
func (app *DemoApp) runInteractiveCLI() {
	fmt.Println("\nüéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º SQLiteIndexer")
	fmt.Println("===================================")
	fmt.Println("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
	fmt.Println("  1. setup     - –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
	fmt.Println("  2. search    - –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π")
	fmt.Println("  3. stats     - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π")
	fmt.Println("  4. add       - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
	fmt.Println("  5. update    - –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
	fmt.Println("  6. delete    - –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")
	fmt.Println("  7. demo      - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é")
	fmt.Println("  8. help      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
	fmt.Println("  9. exit      - –í—ã—Ö–æ–¥")
	fmt.Println()

	scanner := bufio.NewScanner(os.Stdin)

	for {
		fmt.Print("indexer> ")
		if !scanner.Scan() {
			break
		}

		command := strings.TrimSpace(scanner.Text())
		if command == "" {
			continue
		}

		parts := strings.Fields(command)
		cmd := parts[0]

		switch cmd {
		case "setup":
			app.cmdSetup()
		case "search":
			app.cmdSearch(parts[1:])
		case "stats":
			app.cmdStats(parts[1:])
		case "add":
			app.cmdAdd()
		case "update":
			app.cmdUpdate()
		case "delete":
			app.cmdDelete()
		case "demo":
			app.runDemo()
		case "help":
			app.cmdHelp()
		case "exit", "quit":
			fmt.Println("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
			return
		default:
			fmt.Printf("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: %s. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.\n", cmd)
		}
		fmt.Println()
	}
}

func (app *DemoApp) cmdSetup() {
	fmt.Println("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
	app.demoIndexing()
	fmt.Println("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!")
}

func (app *DemoApp) cmdSearch(args []string) {
	if len(args) == 0 {
		fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: search <—Ç–∏–ø_–ø–æ–∏—Å–∫–∞>")
		fmt.Println("–¢–∏–ø—ã –ø–æ–∏—Å–∫–∞:")
		fmt.Println("  collection <–Ω–∞–∑–≤–∞–Ω–∏–µ>  - –ü–æ–∏—Å–∫ –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
		fmt.Println("  text <–∑–∞–ø—Ä–æ—Å>         - –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫")
		fmt.Println("  author <–∏–º—è>          - –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É")
		fmt.Println("  active                - –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
		return
	}

	searchType := args[0]
	var query sqliteindexer.SearchQuery

	switch searchType {
	case "collection":
		if len(args) < 2 {
			fmt.Println("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
			return
		}
		query = sqliteindexer.SearchQuery{
			Collection: args[1],
			Limit:      10,
		}
	case "text":
		if len(args) < 2 {
			fmt.Println("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
			return
		}
		query = sqliteindexer.SearchQuery{
			FullTextQuery: strings.Join(args[1:], " "),
			Limit:         10,
		}
	case "author":
		if len(args) < 2 {
			fmt.Println("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞")
			return
		}
		query = sqliteindexer.SearchQuery{
			Collection: "posts",
			Filters: map[string]interface{}{
				"author": args[1],
			},
			Limit: 10,
		}
	case "active":
		query = sqliteindexer.SearchQuery{
			Collection: "users",
			Filters: map[string]interface{}{
				"active": "true",
			},
			Limit: 10,
		}
	default:
		fmt.Printf("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞: %s\n", searchType)
		return
	}

	results, err := app.indexer.SearchRecords(app.ctx, query)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: %v\n", err)
		return
	}

	if len(results) == 0 {
		fmt.Println("üì≠ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
		return
	}

	fmt.Printf("üîç –ù–∞–π–¥–µ–Ω–æ %d —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n", len(results))
	for i, result := range results {
		fmt.Printf("\n%d. [%s/%s] %s",
			i+1, result.Collection, result.RKey, result.CID.String()[:12]+"...")

		if result.Relevance > 0 {
			fmt.Printf(" (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: %.2f)", result.Relevance)
		}

		if title, ok := result.Data["title"].(string); ok {
			fmt.Printf("\n   üìÑ %s", title)
		} else if name, ok := result.Data["name"].(string); ok {
			fmt.Printf("\n   üë§ %s", name)
		}

		if author, ok := result.Data["author"].(string); ok {
			fmt.Printf("\n   ‚úçÔ∏è  –ê–≤—Ç–æ—Ä: %s", author)
		}

		fmt.Printf("\n   üïê –°–æ–∑–¥–∞–Ω–æ: %s\n", result.CreatedAt.Format("2006-01-02 15:04:05"))
	}
}

func (app *DemoApp) cmdStats(args []string) {
	collections := []string{"posts", "users", "comments", "tags"}

	if len(args) > 0 {
		collections = args
	}

	fmt.Println("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π:")
	for _, collection := range collections {
		stats, err := app.indexer.GetCollectionStats(app.ctx, collection)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è %s: %v\n", collection, err)
			continue
		}

		fmt.Printf("\nüè∑Ô∏è  %s:\n", collection)
		fmt.Printf("  üìÑ –ó–∞–ø–∏—Å–µ–π: %v\n", stats["record_count"])
		fmt.Printf("  üè∑Ô∏è  –¢–∏–ø–æ–≤: %v\n", stats["type_count"])

		if firstRecord, ok := stats["first_record"].(time.Time); ok && !firstRecord.IsZero() {
			fmt.Printf("  üïê –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: %s\n", firstRecord.Format("2006-01-02 15:04:05"))
		}

		if lastUpdated, ok := stats["last_updated"].(time.Time); ok && !lastUpdated.IsZero() {
			fmt.Printf("  üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: %s\n", lastUpdated.Format("2006-01-02 15:04:05"))
		}
	}
}

func (app *DemoApp) cmdAdd() {
	scanner := bufio.NewScanner(os.Stdin)

	fmt.Print("–ö–æ–ª–ª–µ–∫—Ü–∏—è: ")
	scanner.Scan()
	collection := strings.TrimSpace(scanner.Text())

	fmt.Print("–ö–ª—é—á –∑–∞–ø–∏—Å–∏: ")
	scanner.Scan()
	rkey := strings.TrimSpace(scanner.Text())

	fmt.Print("–¢–∏–ø –∑–∞–ø–∏—Å–∏: ")
	scanner.Scan()
	recordType := strings.TrimSpace(scanner.Text())

	fmt.Print("–ó–∞–≥–æ–ª–æ–≤–æ–∫: ")
	scanner.Scan()
	title := strings.TrimSpace(scanner.Text())

	fmt.Print("–ê–≤—Ç–æ—Ä: ")
	scanner.Scan()
	author := strings.TrimSpace(scanner.Text())

	fmt.Print("–ö–æ–Ω—Ç–µ–Ω—Ç: ")
	scanner.Scan()
	content := strings.TrimSpace(scanner.Text())

	cid := app.generateCID(fmt.Sprintf("%s_%s_%d", collection, rkey, time.Now().Unix()))

	record := sqliteindexer.IndexMetadata{
		Collection: collection,
		RKey:       rkey,
		RecordType: recordType,
		Data: map[string]interface{}{
			"title":   title,
			"author":  author,
			"content": content,
		},
		SearchText: fmt.Sprintf("%s %s %s", title, author, content),
		CreatedAt:  time.Now(),
		UpdatedAt:  time.Now(),
	}

	err := app.indexer.IndexRecord(app.ctx, cid, record)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: %v\n", err)
		return
	}

	fmt.Printf("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: %s (CID: %s)\n", title, cid.String()[:12]+"...")
}

func (app *DemoApp) cmdUpdate() {
	scanner := bufio.NewScanner(os.Stdin)

	fmt.Print("CID –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ")
	scanner.Scan()
	cidStr := strings.TrimSpace(scanner.Text())

	parsedCID, err := cid.Parse(cidStr)
	if err != nil {
		fmt.Printf("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π CID: %v\n", err)
		return
	}

	// –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –∑–∞–ø–∏—Å—å
	results, err := app.indexer.SearchRecords(app.ctx, sqliteindexer.SearchQuery{
		Limit: 1000,
	})
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–∏: %v\n", err)
		return
	}

	var foundRecord *sqliteindexer.SearchResult
	for _, result := range results {
		if result.CID.String() == parsedCID.String() {
			foundRecord = &result
			break
		}
	}

	if foundRecord == nil {
		fmt.Println("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		return
	}

	fmt.Printf("–ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å: %v\n", foundRecord.Data["title"])
	fmt.Print("–ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (Enter - –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å): ")
	scanner.Scan()
	newTitle := strings.TrimSpace(scanner.Text())

	if newTitle != "" {
		foundRecord.Data["title"] = newTitle
	}

	record := sqliteindexer.IndexMetadata{
		Collection: foundRecord.Collection,
		RKey:       foundRecord.RKey,
		RecordType: foundRecord.RecordType,
		Data:       foundRecord.Data,
		SearchText: fmt.Sprintf("%v %v %v", foundRecord.Data["title"], foundRecord.Data["author"], foundRecord.Data["content"]),
		CreatedAt:  foundRecord.CreatedAt,
		UpdatedAt:  time.Now(),
	}

	err = app.indexer.IndexRecord(app.ctx, parsedCID, record)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: %v\n", err)
		return
	}

	fmt.Println("‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
}

func (app *DemoApp) cmdDelete() {
	scanner := bufio.NewScanner(os.Stdin)

	fmt.Print("CID –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
	scanner.Scan()
	cidStr := strings.TrimSpace(scanner.Text())

	parsedCID, err := cid.Parse(cidStr)
	if err != nil {
		fmt.Printf("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π CID: %v\n", err)
		return
	}

	err = app.indexer.DeleteRecord(app.ctx, parsedCID)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: %v\n", err)
		return
	}

	fmt.Println("‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!")
}

func (app *DemoApp) cmdHelp() {
	fmt.Println("üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:")
	fmt.Println()
	fmt.Println("üõ†Ô∏è  –ù–ê–°–¢–†–û–ô–ö–ê:")
	fmt.Println("  setup                     - –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
	fmt.Println()
	fmt.Println("üîç –ü–û–ò–°–ö:")
	fmt.Println("  search collection <–∏–º—è>   - –ü–æ–∏—Å–∫ –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
	fmt.Println("  search text <–∑–∞–ø—Ä–æ—Å>      - –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫")
	fmt.Println("  search author <–∏–º—è>       - –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É")
	fmt.Println("  search active             - –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
	fmt.Println()
	fmt.Println("üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê:")
	fmt.Println("  stats                     - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π")
	fmt.Println("  stats <–∫–æ–ª–ª–µ–∫—Ü–∏—è>         - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
	fmt.Println()
	fmt.Println("‚úèÔ∏è  –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò:")
	fmt.Println("  add                       - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å")
	fmt.Println("  update                    - –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å")
	fmt.Println("  delete                    - –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")
	fmt.Println()
	fmt.Println("üéØ –î–†–£–ì–û–ï:")
	fmt.Println("  demo                      - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é")
	fmt.Println("  help                      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
	fmt.Println("  exit                      - –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
	fmt.Println()
	fmt.Println("üí° –ü—Ä–∏–º–µ—Ä—ã:")
	fmt.Println("  search collection posts")
	fmt.Println("  search text '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'")
	fmt.Println("  search author alice")
	fmt.Println("  stats posts users")
}
